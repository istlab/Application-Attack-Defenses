- General Remarks:

We want to thank the reviewers for their meaningful comments.

- Reviewer 1:

# dimitro: I do not know exactly what to say about the following comment:
# "The sensitivity and specificity metrics are questionable (need
# justification and relation to standard techniques), and anyway not
# used much in Table I."
# What does he mean by justification? We provide the corresponding citations
# for the metrics. Finally, we can say that we can say that ce can calculate
# them and add them to the Table.

# dimitro: I do not know what to say about this...
# "The paper is tutorial-like and broad, which is not so bad by itself,
# but it is desirable of a SoK paper to contain more insight than a
# typical survey."

It is true that there are to many N/As in both Tables and especially in
Table II. However, we believe that issues concerning code availability and
accuracy testing are instantly identified by a casual reader.

We are planning to change the paper's title into: "Defending Against Code
Injection Attacks that target Web Applications: From Research Approaches
to Practical Tools".

# dimitro: or ""Defending Against Code Injection Attacks on the Web:
# From Research Approaches to Practical Tools"."
# If you have any other ideas let me know.

As we mention in the paper, we analyze and categorize mechanisms that have
been described in research papers. Still, we can include ADsafe,
Facebook JavaScript, and Secure EcmaScript in the paper in the way
we include Google Caja. In addition, we agree that we should include
FlowFox and JSand (both have >20 citations which is our threshold),
and the paper presenting IFC in WebKit's JavaScript Bytecode (which is
a recent work presented in a top venue). We could also include AdSentry, Contego
and JSFlow too but currently, they do not reach the citation threshold.

# dimitro: is POST (Conference on Principles of Security and Trust)
# a top venue?

We agree that some of the presented approaches utilize either static or
dynamic analysis. As we explain in the paper though, we dismiss the
static and dynamic approaches that identify vulnerabilities that
may lead to the attacks that we refer to and cover protection
mechanisms that stop such attacks when they are launched.

# dimitro: I do not fully understand the following:
# "The security discussion (Section IV) is somewhat minimalistic.
# Further, more insight would be helpful on the security of the systems
# and the attack surfaces covered beyond what is reported in Table I
# (which talks about the classical SQL injection, XSS, CSRF and known
# DOM-based, JSON injection, and XPath injection attacks)."

We can update our model to show where the language-level and web
framework-level protection mechanisms detect an attack. In particular
we can show that this is done at the application level within the server.

The comments concerning Firing Range, XCS attacks, scriptless attacks
and attacks that involve plug-ins are totally valid and we are
planning to address them in the next version of the paper.

- Reviewer 2:

# dimitro: maybe we need to mention that we cover only mechanisms
# that have been presented in a research publication as a general
# remark in the beginning of our response.

We tried to equally cover every mechanism and then as the paper
progresses we highlight the reasons why a mechanism may be widely
used or not. In our conclusion section, we particularly mention
that CSP is one of the few mechanisms that contrary to other approaches,
has been presented in a research publication and at the same time
is widely used. Furthermore, it is true that if a programmer uses
secure coding practices (for instance prepared statements) then
a mechanism that counters SQLIAs is not necessarily needed.
However, as we mention in the paper, programmers are not always
that careful and this is why protection mechanisms like SQLrand
have been proposed in the first place.

In the description of our model, we state that there are two
ways to initiate the majority of the presented attacks.
In both cases, the first steps will result to the same path.
To distinguish these first step we use the 1 - 1.1 notation.
The point concerning the PHP injection attack is valid. In general,
we tried to illustrate the most known web injection attacks in our
model. Still, with can easily incorporate such an attack in our model
with minor modifications (the same applies to POI attacks as we
already mention in the paper).

Finally, our model covers attacks that utilize DSL languages in general
(including SQL, XPath etc.), while in our categorization there is
more than one countermeasure that protects from XPath injection attacks.

- Reviewer 3:

As we mention in the introduction of our paper, we did not cover static
analysis tools that detect vulnerabilities that lead to the covered attacks
because there is a corresponding survey by that does exactly that [14].

# dimitro: here we go again.

As we also mentioned to the previous responses, we did not include
in our categorization, mechanisms that have not been presented in
a research paper. However, Caja is a very important mechanism
and this is why we reference it in our paper and particularly as
a framework that is widely used.

We do agree with the comment on the "ease of use" dimension and we will
address it in our next revision. Also, the comment about the EiQ is
correct: it is DBAL. Finally, we will update our SQL injection
example to make it clearer.

- Reviewer 4:

We need to make clear that we do not want to criticize the lack of testing
in etiological mechanisms. We try to investigate the reason why such mechanisms
are not widely used and we suggest that this is one reason.
